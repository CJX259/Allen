// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  PENDING
  RESOLVE
  REJECT
  ALL
}

enum OrderStatus {
  CONTRACTING
  // CONTRACTED
  CHECKING
  // CHECKED
  DOING
  DONE
  REJECTING
  REJECTED
}

enum Role {
  ADMIN
  ANCHOR
  COMPANY
}

model Tag {
  id          Int @id @default(autoincrement())
  name        String @unique
  // goods       Goods?
  // user        User?
  ctime       DateTime @default(now())
  utime       DateTime @updatedAt
  users       TagsOnUsers[]
  goods       TagsOnGoods[]
}

model User {
  id           Int   @id @default(autoincrement())
  phone        String @db.VarChar(13) @unique
  password     String?  @db.VarChar(32)
  name         String   @default(cuid()) @unique
  experience   Int      @default(0)
  introduce    String?  @default("此用户暂无简介")
  realName     String
  idCard       String   @unique
  avatarKey    String?  @default("569488.default.png")
  address      String
  mail         String
  vx           String
  status       Status   @default(PENDING)
  reason       String?
  ctime        DateTime @default(now())
  utime        DateTime @updatedAt
  role         Role
  tags         TagsOnUsers[]
  goods        Goods?
  author       Order[] @relation(name: "author")
  target       Order[] @relation(name: "target")
  userComment  UserComment?
}

model Goods {
  id          Int   @id @default(autoincrement())
  name        String
  introduce        String
  price       Int
  companyId   Int
  company     User @relation(fields: [companyId], references: [id])
  // order       Order?
  tags        TagsOnGoods[]
  // tag         Tag @relation(fields: [tagId], references: [id])
  ctime       DateTime @default(now())
  utime       DateTime @updatedAt
}

model TagsOnUsers {
  user        User @relation(fields: [userId], references: [id])
  userId      Int
  tag         Tag @relation(fields: [tagId], references: [id])
  tagId       Int

  @@id([tagId, userId])
}

model TagsOnGoods {
  goods       Goods @relation(fields: [goodsId], references: [id])
  goodsId     Int
  tag         Tag @relation(fields: [tagId], references: [id])
  tagId       Int

  @@id([tagId, goodsId])
}

model Order {
  id          Int @id @default(autoincrement())
  status      OrderStatus
  liveUrl     String?
  time        String?
  times       Int?
  // goodsId     Int
  // goods       Goods @relation(fields: [goodsId], references: [id])
  // 发起人id
  authorId    Int
  author      User @relation(name: "author", fields: [authorId], references: [id])
  // authorRole  Role
  // 发起人准备进入下一状态
  authorNext  Boolean?
  targetId    Int
  target      User @relation(name: "target", fields: [targetId], references: [id])
  // targetRole  Role
  // 接收人准备进入下一状态
  targetNext  Boolean?
  // 快递单号
  expressNum  String?
  // 快递公司
  expressType String?
  // 备注（其他公司时填写）
  tips        String?
  ctime       DateTime @default(now())
  utime       DateTime @updatedAt
}

model UserComment {
  id          Int @id @default(autoincrement())
  comment     String
  rating      Int
  userId      Int
  user        User  @relation(fields: [userId], references: [id])
  ctime       DateTime @default(now())
  utime       DateTime @updatedAt
}

model GoodsComment {
  id          Int @id @default(autoincrement())
  comment     String
  rating      Int
  ctime       DateTime @default(now())
  utime       DateTime @updatedAt
}
